{"remainingRequest":"/Users/jennadorsey/Desktop/nextlevel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jennadorsey/Desktop/nextlevel/src/views/EventList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jennadorsey/Desktop/nextlevel/src/views/EventList.vue","mtime":1569801574395},{"path":"/Users/jennadorsey/Desktop/nextlevel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jennadorsey/Desktop/nextlevel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jennadorsey/Desktop/nextlevel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jennadorsey/Desktop/nextlevel/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EventCard from '@/components/EventCard.vue'\nimport { mapState } from 'vuex'\nimport store from '@/store/store'\nfunction getPageEvents(routeTo, next) {\n  const currentPage = parseInt(routeTo.query.page || 1)\n  store\n    .dispatch('event/fetchEvents', {\n      page: currentPage\n    })\n    .then(() => {\n      // pass it into the component as a prop, so we can print next pages\n      routeTo.params.page = currentPage\n      next()\n    })\n}\nexport default {\n  props: {\n    page: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    EventCard\n  },\n  beforeRouteEnter(routeTo, routeFrom, next) {\n    getPageEvents(routeTo, next)\n  },\n  beforeRouteUpdate(routeTo, routeFrom, next) {\n    getPageEvents(routeTo, next)\n  },\n  computed: {\n    hasNextPage() {\n      return this.event.eventsTotal > this.page * this.event.perPage\n    },\n    ...mapState(['event', 'user'])\n  }\n}\n",{"version":3,"sources":["EventList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EventList.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <h1>Events for {{ user.user.name }}</h1>\n    <EventCard v-for=\"event in event.events\" :key=\"event.id\" :event=\"event\"/>\n    <template v-if=\"page != 1\">\n      <router-link :to=\"{ name: 'event-list', query: { page: page - 1 } }\" rel=\"prev\">Prev Page</router-link>\n      <template v-if=\"hasNextPage\">|</template>\n    </template>\n    <router-link\n      v-if=\"hasNextPage\"\n      :to=\"{ name: 'event-list', query: { page: page + 1 } }\"\n      rel=\"next\"\n    >Next Page</router-link>\n  </div>\n</template>\n\n<script>\nimport EventCard from '@/components/EventCard.vue'\nimport { mapState } from 'vuex'\nimport store from '@/store/store'\nfunction getPageEvents(routeTo, next) {\n  const currentPage = parseInt(routeTo.query.page || 1)\n  store\n    .dispatch('event/fetchEvents', {\n      page: currentPage\n    })\n    .then(() => {\n      // pass it into the component as a prop, so we can print next pages\n      routeTo.params.page = currentPage\n      next()\n    })\n}\nexport default {\n  props: {\n    page: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    EventCard\n  },\n  beforeRouteEnter(routeTo, routeFrom, next) {\n    getPageEvents(routeTo, next)\n  },\n  beforeRouteUpdate(routeTo, routeFrom, next) {\n    getPageEvents(routeTo, next)\n  },\n  computed: {\n    hasNextPage() {\n      return this.event.eventsTotal > this.page * this.event.perPage\n    },\n    ...mapState(['event', 'user'])\n  }\n}\n</script>"]}]}